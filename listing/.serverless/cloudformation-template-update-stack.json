{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/listing-dev-auth"
      }
    },
    "CreateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/listing-dev-create"
      }
    },
    "ListLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/listing-dev-list"
      }
    },
    "GetLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/listing-dev-get"
      }
    },
    "UpdateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/listing-dev-update"
      }
    },
    "DeleteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/listing-dev-delete"
      }
    },
    "UploadImageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/listing-dev-uploadImage"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "listing",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/listing-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/listing-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/listing-dev"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                  ],
                  "Resource": "arn:aws:s3:::lend-it.listing.images/*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "listing",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/listing/dev/1600135461095-2020-09-15T02:04:21.095Z/listing.zip"
        },
        "FunctionName": "listing-dev-auth",
        "Handler": "auth/auth.auth",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "listing-dev",
            "IMAGE_BUCKET": "lend-it.listing.images",
            "AUTH0_CLIENT_ID": "IgScpulqHOWi6MmJtlxS1vUP7b2T2cBc",
            "AUTH0_CLIENT_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\r\nMIIDDTCCAfWgAwIBAgIJb7vx6Ef6fP71MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV\r\nBAMTGWRldi0wdmJrZDNwYy5hdS5hdXRoMC5jb20wHhcNMjAwOTE0MTM0NTA4WhcN\r\nMzQwNTI0MTM0NTA4WjAkMSIwIAYDVQQDExlkZXYtMHZia2QzcGMuYXUuYXV0aDAu\r\nY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA439rB7BIToXghKQC\r\nZi8bF2WhjuE4SEYrlgOIYv/0Ro+PWpIaz1aqxnhq3S3ITOdWKSoPv43S6jjL/VlC\r\ntc0JwBBERkGsHN5KWDtp+oH3wHHFdrzzb0A58YM3N9uqvmnHs6Sj15bmFveQGaqM\r\neHL85aGT5LhHQuIGb+s+vrKz5ng8kGR8o0Mdspv87mG1AFAtmN6gfvs61nD9CJaY\r\nZ1WSBuaY8Y+Ckw3iW2hcwqGikJPcXBkgc12h58D0HydedicIp4COIEEd/gNw2J1g\r\nowEn0NEYf2ABGlTJiee1iisDn+s9GsEBxZwSzP3+PqtaMdL9dMv+u+/jtwGqFLIn\r\nksVF3wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRjJ4cUHLqM\r\nKEsGv3RmDtjJSKgerzAOBgNVHQ8BAf8EBAMCAoQwDQYJKoZIhvcNAQELBQADggEB\r\nAMfRiGEpjKDOMkoNoMQ6aU8mR6NXljpvrCNPZt9xnx2vrjH9eW3+9Ya1ISz/fDPK\r\nZ11lkfezh2/BrQGjD/h4iF/7GyY31waf80HYL7Mu+PIQhOC3G3sfSiiOyUAl8j3c\r\nuglQvV2JIMJhI4o2cqrdSEGM7nGcDEvE0mnIqRBO22HRUpVnrqzX6lfYkAm767Y3\r\n2h5Dj91GOK+VJ1vxdS7ZO/EnJkDDvbtWcbjz9fbprMW555LYq415dY7+Vhs5IUqG\r\nec9s7nadpUx+IiAWEdeZg0I5YlDz3PBuot0ADQcYqluVbpPa+AcYD9nvo01IdMYe\r\nSoH9imVavlnGLbQy/O37/xQ=\r\n-----END CERTIFICATE-----"
          }
        }
      },
      "DependsOn": [
        "AuthLogGroup"
      ]
    },
    "AuthLambdaVersionlgOlg1wr1HicO2fivn263eA2fmdP21cEHiNG6aJipc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthLambdaFunction"
        },
        "CodeSha256": "MD5OI7GPTGf9QqilrMDCLIVZ8+7EjnxycbNHXT1hzEU="
      }
    },
    "CreateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/listing/dev/1600135461095-2020-09-15T02:04:21.095Z/listing.zip"
        },
        "FunctionName": "listing-dev-create",
        "Handler": "listing/create.create",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "listing-dev",
            "IMAGE_BUCKET": "lend-it.listing.images",
            "AUTH0_CLIENT_ID": "IgScpulqHOWi6MmJtlxS1vUP7b2T2cBc",
            "AUTH0_CLIENT_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\r\nMIIDDTCCAfWgAwIBAgIJb7vx6Ef6fP71MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV\r\nBAMTGWRldi0wdmJrZDNwYy5hdS5hdXRoMC5jb20wHhcNMjAwOTE0MTM0NTA4WhcN\r\nMzQwNTI0MTM0NTA4WjAkMSIwIAYDVQQDExlkZXYtMHZia2QzcGMuYXUuYXV0aDAu\r\nY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA439rB7BIToXghKQC\r\nZi8bF2WhjuE4SEYrlgOIYv/0Ro+PWpIaz1aqxnhq3S3ITOdWKSoPv43S6jjL/VlC\r\ntc0JwBBERkGsHN5KWDtp+oH3wHHFdrzzb0A58YM3N9uqvmnHs6Sj15bmFveQGaqM\r\neHL85aGT5LhHQuIGb+s+vrKz5ng8kGR8o0Mdspv87mG1AFAtmN6gfvs61nD9CJaY\r\nZ1WSBuaY8Y+Ckw3iW2hcwqGikJPcXBkgc12h58D0HydedicIp4COIEEd/gNw2J1g\r\nowEn0NEYf2ABGlTJiee1iisDn+s9GsEBxZwSzP3+PqtaMdL9dMv+u+/jtwGqFLIn\r\nksVF3wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRjJ4cUHLqM\r\nKEsGv3RmDtjJSKgerzAOBgNVHQ8BAf8EBAMCAoQwDQYJKoZIhvcNAQELBQADggEB\r\nAMfRiGEpjKDOMkoNoMQ6aU8mR6NXljpvrCNPZt9xnx2vrjH9eW3+9Ya1ISz/fDPK\r\nZ11lkfezh2/BrQGjD/h4iF/7GyY31waf80HYL7Mu+PIQhOC3G3sfSiiOyUAl8j3c\r\nuglQvV2JIMJhI4o2cqrdSEGM7nGcDEvE0mnIqRBO22HRUpVnrqzX6lfYkAm767Y3\r\n2h5Dj91GOK+VJ1vxdS7ZO/EnJkDDvbtWcbjz9fbprMW555LYq415dY7+Vhs5IUqG\r\nec9s7nadpUx+IiAWEdeZg0I5YlDz3PBuot0ADQcYqluVbpPa+AcYD9nvo01IdMYe\r\nSoH9imVavlnGLbQy/O37/xQ=\r\n-----END CERTIFICATE-----"
          }
        }
      },
      "DependsOn": [
        "CreateLogGroup"
      ]
    },
    "CreateLambdaVersionBs9luIFG4zBlh3CrZ61Syq2KLdzzgNG9ZgqJcNzMD4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateLambdaFunction"
        },
        "CodeSha256": "MD5OI7GPTGf9QqilrMDCLIVZ8+7EjnxycbNHXT1hzEU="
      }
    },
    "ListLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/listing/dev/1600135461095-2020-09-15T02:04:21.095Z/listing.zip"
        },
        "FunctionName": "listing-dev-list",
        "Handler": "listing/list.list",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "listing-dev",
            "IMAGE_BUCKET": "lend-it.listing.images",
            "AUTH0_CLIENT_ID": "IgScpulqHOWi6MmJtlxS1vUP7b2T2cBc",
            "AUTH0_CLIENT_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\r\nMIIDDTCCAfWgAwIBAgIJb7vx6Ef6fP71MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV\r\nBAMTGWRldi0wdmJrZDNwYy5hdS5hdXRoMC5jb20wHhcNMjAwOTE0MTM0NTA4WhcN\r\nMzQwNTI0MTM0NTA4WjAkMSIwIAYDVQQDExlkZXYtMHZia2QzcGMuYXUuYXV0aDAu\r\nY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA439rB7BIToXghKQC\r\nZi8bF2WhjuE4SEYrlgOIYv/0Ro+PWpIaz1aqxnhq3S3ITOdWKSoPv43S6jjL/VlC\r\ntc0JwBBERkGsHN5KWDtp+oH3wHHFdrzzb0A58YM3N9uqvmnHs6Sj15bmFveQGaqM\r\neHL85aGT5LhHQuIGb+s+vrKz5ng8kGR8o0Mdspv87mG1AFAtmN6gfvs61nD9CJaY\r\nZ1WSBuaY8Y+Ckw3iW2hcwqGikJPcXBkgc12h58D0HydedicIp4COIEEd/gNw2J1g\r\nowEn0NEYf2ABGlTJiee1iisDn+s9GsEBxZwSzP3+PqtaMdL9dMv+u+/jtwGqFLIn\r\nksVF3wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRjJ4cUHLqM\r\nKEsGv3RmDtjJSKgerzAOBgNVHQ8BAf8EBAMCAoQwDQYJKoZIhvcNAQELBQADggEB\r\nAMfRiGEpjKDOMkoNoMQ6aU8mR6NXljpvrCNPZt9xnx2vrjH9eW3+9Ya1ISz/fDPK\r\nZ11lkfezh2/BrQGjD/h4iF/7GyY31waf80HYL7Mu+PIQhOC3G3sfSiiOyUAl8j3c\r\nuglQvV2JIMJhI4o2cqrdSEGM7nGcDEvE0mnIqRBO22HRUpVnrqzX6lfYkAm767Y3\r\n2h5Dj91GOK+VJ1vxdS7ZO/EnJkDDvbtWcbjz9fbprMW555LYq415dY7+Vhs5IUqG\r\nec9s7nadpUx+IiAWEdeZg0I5YlDz3PBuot0ADQcYqluVbpPa+AcYD9nvo01IdMYe\r\nSoH9imVavlnGLbQy/O37/xQ=\r\n-----END CERTIFICATE-----"
          }
        }
      },
      "DependsOn": [
        "ListLogGroup"
      ]
    },
    "ListLambdaVersionKay61y3X64zPlb6gThpRzS6BX1dkJ3mcvBzPfSKbE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListLambdaFunction"
        },
        "CodeSha256": "MD5OI7GPTGf9QqilrMDCLIVZ8+7EjnxycbNHXT1hzEU="
      }
    },
    "GetLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/listing/dev/1600135461095-2020-09-15T02:04:21.095Z/listing.zip"
        },
        "FunctionName": "listing-dev-get",
        "Handler": "listing/get.get",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "listing-dev",
            "IMAGE_BUCKET": "lend-it.listing.images",
            "AUTH0_CLIENT_ID": "IgScpulqHOWi6MmJtlxS1vUP7b2T2cBc",
            "AUTH0_CLIENT_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\r\nMIIDDTCCAfWgAwIBAgIJb7vx6Ef6fP71MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV\r\nBAMTGWRldi0wdmJrZDNwYy5hdS5hdXRoMC5jb20wHhcNMjAwOTE0MTM0NTA4WhcN\r\nMzQwNTI0MTM0NTA4WjAkMSIwIAYDVQQDExlkZXYtMHZia2QzcGMuYXUuYXV0aDAu\r\nY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA439rB7BIToXghKQC\r\nZi8bF2WhjuE4SEYrlgOIYv/0Ro+PWpIaz1aqxnhq3S3ITOdWKSoPv43S6jjL/VlC\r\ntc0JwBBERkGsHN5KWDtp+oH3wHHFdrzzb0A58YM3N9uqvmnHs6Sj15bmFveQGaqM\r\neHL85aGT5LhHQuIGb+s+vrKz5ng8kGR8o0Mdspv87mG1AFAtmN6gfvs61nD9CJaY\r\nZ1WSBuaY8Y+Ckw3iW2hcwqGikJPcXBkgc12h58D0HydedicIp4COIEEd/gNw2J1g\r\nowEn0NEYf2ABGlTJiee1iisDn+s9GsEBxZwSzP3+PqtaMdL9dMv+u+/jtwGqFLIn\r\nksVF3wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRjJ4cUHLqM\r\nKEsGv3RmDtjJSKgerzAOBgNVHQ8BAf8EBAMCAoQwDQYJKoZIhvcNAQELBQADggEB\r\nAMfRiGEpjKDOMkoNoMQ6aU8mR6NXljpvrCNPZt9xnx2vrjH9eW3+9Ya1ISz/fDPK\r\nZ11lkfezh2/BrQGjD/h4iF/7GyY31waf80HYL7Mu+PIQhOC3G3sfSiiOyUAl8j3c\r\nuglQvV2JIMJhI4o2cqrdSEGM7nGcDEvE0mnIqRBO22HRUpVnrqzX6lfYkAm767Y3\r\n2h5Dj91GOK+VJ1vxdS7ZO/EnJkDDvbtWcbjz9fbprMW555LYq415dY7+Vhs5IUqG\r\nec9s7nadpUx+IiAWEdeZg0I5YlDz3PBuot0ADQcYqluVbpPa+AcYD9nvo01IdMYe\r\nSoH9imVavlnGLbQy/O37/xQ=\r\n-----END CERTIFICATE-----"
          }
        }
      },
      "DependsOn": [
        "GetLogGroup"
      ]
    },
    "GetLambdaVersionQdigAjbAsUXbHWBnn21DlVoWY6bGPol1P23xMnB9low": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetLambdaFunction"
        },
        "CodeSha256": "MD5OI7GPTGf9QqilrMDCLIVZ8+7EjnxycbNHXT1hzEU="
      }
    },
    "UpdateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/listing/dev/1600135461095-2020-09-15T02:04:21.095Z/listing.zip"
        },
        "FunctionName": "listing-dev-update",
        "Handler": "listing/update.update",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "listing-dev",
            "IMAGE_BUCKET": "lend-it.listing.images",
            "AUTH0_CLIENT_ID": "IgScpulqHOWi6MmJtlxS1vUP7b2T2cBc",
            "AUTH0_CLIENT_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\r\nMIIDDTCCAfWgAwIBAgIJb7vx6Ef6fP71MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV\r\nBAMTGWRldi0wdmJrZDNwYy5hdS5hdXRoMC5jb20wHhcNMjAwOTE0MTM0NTA4WhcN\r\nMzQwNTI0MTM0NTA4WjAkMSIwIAYDVQQDExlkZXYtMHZia2QzcGMuYXUuYXV0aDAu\r\nY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA439rB7BIToXghKQC\r\nZi8bF2WhjuE4SEYrlgOIYv/0Ro+PWpIaz1aqxnhq3S3ITOdWKSoPv43S6jjL/VlC\r\ntc0JwBBERkGsHN5KWDtp+oH3wHHFdrzzb0A58YM3N9uqvmnHs6Sj15bmFveQGaqM\r\neHL85aGT5LhHQuIGb+s+vrKz5ng8kGR8o0Mdspv87mG1AFAtmN6gfvs61nD9CJaY\r\nZ1WSBuaY8Y+Ckw3iW2hcwqGikJPcXBkgc12h58D0HydedicIp4COIEEd/gNw2J1g\r\nowEn0NEYf2ABGlTJiee1iisDn+s9GsEBxZwSzP3+PqtaMdL9dMv+u+/jtwGqFLIn\r\nksVF3wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRjJ4cUHLqM\r\nKEsGv3RmDtjJSKgerzAOBgNVHQ8BAf8EBAMCAoQwDQYJKoZIhvcNAQELBQADggEB\r\nAMfRiGEpjKDOMkoNoMQ6aU8mR6NXljpvrCNPZt9xnx2vrjH9eW3+9Ya1ISz/fDPK\r\nZ11lkfezh2/BrQGjD/h4iF/7GyY31waf80HYL7Mu+PIQhOC3G3sfSiiOyUAl8j3c\r\nuglQvV2JIMJhI4o2cqrdSEGM7nGcDEvE0mnIqRBO22HRUpVnrqzX6lfYkAm767Y3\r\n2h5Dj91GOK+VJ1vxdS7ZO/EnJkDDvbtWcbjz9fbprMW555LYq415dY7+Vhs5IUqG\r\nec9s7nadpUx+IiAWEdeZg0I5YlDz3PBuot0ADQcYqluVbpPa+AcYD9nvo01IdMYe\r\nSoH9imVavlnGLbQy/O37/xQ=\r\n-----END CERTIFICATE-----"
          }
        }
      },
      "DependsOn": [
        "UpdateLogGroup"
      ]
    },
    "UpdateLambdaVersionlijo3iiiY7SIu3XBuYMY41PLJr00EmuX9keTLHEaHQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateLambdaFunction"
        },
        "CodeSha256": "MD5OI7GPTGf9QqilrMDCLIVZ8+7EjnxycbNHXT1hzEU="
      }
    },
    "DeleteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/listing/dev/1600135461095-2020-09-15T02:04:21.095Z/listing.zip"
        },
        "FunctionName": "listing-dev-delete",
        "Handler": "listing/delete.delete",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "listing-dev",
            "IMAGE_BUCKET": "lend-it.listing.images",
            "AUTH0_CLIENT_ID": "IgScpulqHOWi6MmJtlxS1vUP7b2T2cBc",
            "AUTH0_CLIENT_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\r\nMIIDDTCCAfWgAwIBAgIJb7vx6Ef6fP71MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV\r\nBAMTGWRldi0wdmJrZDNwYy5hdS5hdXRoMC5jb20wHhcNMjAwOTE0MTM0NTA4WhcN\r\nMzQwNTI0MTM0NTA4WjAkMSIwIAYDVQQDExlkZXYtMHZia2QzcGMuYXUuYXV0aDAu\r\nY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA439rB7BIToXghKQC\r\nZi8bF2WhjuE4SEYrlgOIYv/0Ro+PWpIaz1aqxnhq3S3ITOdWKSoPv43S6jjL/VlC\r\ntc0JwBBERkGsHN5KWDtp+oH3wHHFdrzzb0A58YM3N9uqvmnHs6Sj15bmFveQGaqM\r\neHL85aGT5LhHQuIGb+s+vrKz5ng8kGR8o0Mdspv87mG1AFAtmN6gfvs61nD9CJaY\r\nZ1WSBuaY8Y+Ckw3iW2hcwqGikJPcXBkgc12h58D0HydedicIp4COIEEd/gNw2J1g\r\nowEn0NEYf2ABGlTJiee1iisDn+s9GsEBxZwSzP3+PqtaMdL9dMv+u+/jtwGqFLIn\r\nksVF3wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRjJ4cUHLqM\r\nKEsGv3RmDtjJSKgerzAOBgNVHQ8BAf8EBAMCAoQwDQYJKoZIhvcNAQELBQADggEB\r\nAMfRiGEpjKDOMkoNoMQ6aU8mR6NXljpvrCNPZt9xnx2vrjH9eW3+9Ya1ISz/fDPK\r\nZ11lkfezh2/BrQGjD/h4iF/7GyY31waf80HYL7Mu+PIQhOC3G3sfSiiOyUAl8j3c\r\nuglQvV2JIMJhI4o2cqrdSEGM7nGcDEvE0mnIqRBO22HRUpVnrqzX6lfYkAm767Y3\r\n2h5Dj91GOK+VJ1vxdS7ZO/EnJkDDvbtWcbjz9fbprMW555LYq415dY7+Vhs5IUqG\r\nec9s7nadpUx+IiAWEdeZg0I5YlDz3PBuot0ADQcYqluVbpPa+AcYD9nvo01IdMYe\r\nSoH9imVavlnGLbQy/O37/xQ=\r\n-----END CERTIFICATE-----"
          }
        }
      },
      "DependsOn": [
        "DeleteLogGroup"
      ]
    },
    "DeleteLambdaVersion2SbxS0xWL9SE55tknZ1kWRWbw6u1gOmAOuxJuZyjD9A": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteLambdaFunction"
        },
        "CodeSha256": "MD5OI7GPTGf9QqilrMDCLIVZ8+7EjnxycbNHXT1hzEU="
      }
    },
    "UploadImageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/listing/dev/1600135461095-2020-09-15T02:04:21.095Z/listing.zip"
        },
        "FunctionName": "listing-dev-uploadImage",
        "Handler": "listing/upload.upload",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "listing-dev",
            "IMAGE_BUCKET": "lend-it.listing.images",
            "AUTH0_CLIENT_ID": "IgScpulqHOWi6MmJtlxS1vUP7b2T2cBc",
            "AUTH0_CLIENT_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\r\nMIIDDTCCAfWgAwIBAgIJb7vx6Ef6fP71MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV\r\nBAMTGWRldi0wdmJrZDNwYy5hdS5hdXRoMC5jb20wHhcNMjAwOTE0MTM0NTA4WhcN\r\nMzQwNTI0MTM0NTA4WjAkMSIwIAYDVQQDExlkZXYtMHZia2QzcGMuYXUuYXV0aDAu\r\nY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA439rB7BIToXghKQC\r\nZi8bF2WhjuE4SEYrlgOIYv/0Ro+PWpIaz1aqxnhq3S3ITOdWKSoPv43S6jjL/VlC\r\ntc0JwBBERkGsHN5KWDtp+oH3wHHFdrzzb0A58YM3N9uqvmnHs6Sj15bmFveQGaqM\r\neHL85aGT5LhHQuIGb+s+vrKz5ng8kGR8o0Mdspv87mG1AFAtmN6gfvs61nD9CJaY\r\nZ1WSBuaY8Y+Ckw3iW2hcwqGikJPcXBkgc12h58D0HydedicIp4COIEEd/gNw2J1g\r\nowEn0NEYf2ABGlTJiee1iisDn+s9GsEBxZwSzP3+PqtaMdL9dMv+u+/jtwGqFLIn\r\nksVF3wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRjJ4cUHLqM\r\nKEsGv3RmDtjJSKgerzAOBgNVHQ8BAf8EBAMCAoQwDQYJKoZIhvcNAQELBQADggEB\r\nAMfRiGEpjKDOMkoNoMQ6aU8mR6NXljpvrCNPZt9xnx2vrjH9eW3+9Ya1ISz/fDPK\r\nZ11lkfezh2/BrQGjD/h4iF/7GyY31waf80HYL7Mu+PIQhOC3G3sfSiiOyUAl8j3c\r\nuglQvV2JIMJhI4o2cqrdSEGM7nGcDEvE0mnIqRBO22HRUpVnrqzX6lfYkAm767Y3\r\n2h5Dj91GOK+VJ1vxdS7ZO/EnJkDDvbtWcbjz9fbprMW555LYq415dY7+Vhs5IUqG\r\nec9s7nadpUx+IiAWEdeZg0I5YlDz3PBuot0ADQcYqluVbpPa+AcYD9nvo01IdMYe\r\nSoH9imVavlnGLbQy/O37/xQ=\r\n-----END CERTIFICATE-----"
          }
        }
      },
      "DependsOn": [
        "UploadImageLogGroup"
      ]
    },
    "UploadImageLambdaVersiondEbXbViic7sSQBLVaUwhBkCFe1MkcVXV05Z4ZUqjJBE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadImageLambdaFunction"
        },
        "CodeSha256": "MD5OI7GPTGf9QqilrMDCLIVZ8+7EjnxycbNHXT1hzEU="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-listing",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceListings": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "listings",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceListingsIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceListings"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceListingsUploadDashimage": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceListings"
        },
        "PathPart": "upload-image",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodListingsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceListings"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodListingsIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceListingsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodListingsUploadDashimageOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceListingsUploadDashimage"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodListingsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceListings"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayMethodListingsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceListings"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodListingsIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceListingsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodListingsIdVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceListingsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayMethodListingsIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceListingsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayMethodListingsUploadDashimagePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceListingsUploadDashimage"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UploadImageLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "AuthApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "IdentitySource": "method.request.header.Authorization",
        "Name": "auth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "AuthLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN"
      }
    },
    "ApiGatewayDeployment1600135458867": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodListingsOptions",
        "ApiGatewayMethodListingsIdVarOptions",
        "ApiGatewayMethodListingsUploadDashimageOptions",
        "ApiGatewayMethodListingsPost",
        "ApiGatewayMethodListingsGet",
        "ApiGatewayMethodListingsIdVarGet",
        "ApiGatewayMethodListingsIdVarPut",
        "ApiGatewayMethodListingsIdVarDelete",
        "ApiGatewayMethodListingsUploadDashimagePost"
      ]
    },
    "CreateLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AuthLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ListLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UploadImageLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadImageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TodosDynamoDbTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "listing-dev"
      }
    },
    "GatewayResponse": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        },
        "ResponseType": "EXPIRED_TOKEN",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StatusCode": "401"
      }
    },
    "AuthFailureGatewayResponse": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        },
        "ResponseType": "UNAUTHORIZED",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StatusCode": "401"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "AuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AuthLambdaVersionlgOlg1wr1HicO2fivn263eA2fmdP21cEHiNG6aJipc"
      }
    },
    "CreateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateLambdaVersionBs9luIFG4zBlh3CrZ61Syq2KLdzzgNG9ZgqJcNzMD4"
      }
    },
    "ListLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListLambdaVersionKay61y3X64zPlb6gThpRzS6BX1dkJ3mcvBzPfSKbE"
      }
    },
    "GetLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetLambdaVersionQdigAjbAsUXbHWBnn21DlVoWY6bGPol1P23xMnB9low"
      }
    },
    "UpdateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateLambdaVersionlijo3iiiY7SIu3XBuYMY41PLJr00EmuX9keTLHEaHQ"
      }
    },
    "DeleteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteLambdaVersion2SbxS0xWL9SE55tknZ1kWRWbw6u1gOmAOuxJuZyjD9A"
      }
    },
    "UploadImageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadImageLambdaVersiondEbXbViic7sSQBLVaUwhBkCFe1MkcVXV05Z4ZUqjJBE"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    }
  }
}